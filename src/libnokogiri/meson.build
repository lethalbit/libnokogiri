libnokogiri_headers = files([
	'common.hh',
	'pcap.hh',
	'pcapng.hh',
])

subdir('internal')

subdir('pcapng')

config = configuration_data()
config.set('AUTOGEN_HEADER', '/* THIS FILE IS AUTOGENERATED, DO NOT EDIT */')
config.set('VERSION_NUMBER', meson.project_version())
config.set('COMPILER', cxx.get_id())
config.set('COMPILER_VERSION', cxx.version())

if (cxx.get_id() == 'gcc' and cxx.version().version_compare('<9.0.0')) or (cxx.get_id() == 'clang' and cxx.version().version_compare('<9.0.0'))
	if cxx.has_header('experimental/filesystem') == false
		error('Unable to find C++17 experimental/filesystem header')
	endif
	libnokogiri_deps += [ cxx.find_library('libstdc++fs', required: true) ]
	config.set('LIBNOKOGIRI_CPPFS_EXPERIMENTAL', 1)
endif

if get_option('debug')
	git =  find_program('git', required: false, native: true)

	if git.found()
		git_hash = run_command(git, 'rev-parse', '--short', 'HEAD').stdout().strip()
		if run_command(git, 'diff', '--quiet').returncode() != 0
		        git_hash += '-dirty'
		endif
		config.set('GIT_HASH', git_hash)
	endif
else
	config.set('GIT_HASH', '')
endif

config.set('TARGET_SYS', target_machine.system())
config.set('TARGET_ARCH', target_machine.cpu())

config.set('BUILD_SYS', build_machine.system())
config.set('BUILD_ARCH', build_machine.cpu())

config.set('PREFIX', get_option('prefix'))

config.set('BUGREPORT_URL', get_option('bugreport_url'))

if get_option('compressed_pcap_support')
	compressed_pcaps = 'true'
	config.set('LIBNOKOGIRI_COMPRESSED_PCAP_SUPPORTED', 1)
else
	compressed_pcaps = 'false'
endif

config.set('COMPRESSED_PCAP_SUPPORT', compressed_pcaps)

configure_file(
	configuration: config,
	input: 'config.hh.in',
	output: 'config.hh'
)

libnokogiri_srcs += files([
	'pcap.cc',
	'pcapng.cc',
	'common.cc',
])


if not meson.is_subproject()
	install_headers(
		'libnokogiri.hh'
	)

	install_headers(
		'@0@/src/libnokogiri/config.hh'.format(meson.build_root()),
		subdir: 'libnokogiri'
	)

	install_headers(
		libnokogiri_headers,
		subdir: 'libnokogiri'
	)
endif
