<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structlibnokogiri_1_1version__t" kind="struct" language="C++" prot="public" final="yes">
    <compoundname>libnokogiri::version_t</compoundname>
    <includes refid="common_8hh" local="no">common.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structlibnokogiri_1_1version__t_1a0ef00172fa1f2e2f8a6880ee501bce05" prot="private" static="no" mutable="no">
        <type>std::uint16_t</type>
        <definition>std::uint16_t libnokogiri::version_t::_major</definition>
        <argsstring></argsstring>
        <name>_major</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="199" column="1" bodyfile="common.hh" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1version__t_1a27e85a5bcc90c08c4c31547f8982d0b6" prot="private" static="no" mutable="no">
        <type>std::uint16_t</type>
        <definition>std::uint16_t libnokogiri::version_t::_minor</definition>
        <argsstring></argsstring>
        <name>_minor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="200" column="1" bodyfile="common.hh" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a36a259bbc7fdbd9878e911bb26a13099" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr libnokogiri::version_t::version_t</definition>
        <argsstring>() noexcept</argsstring>
        <name>version_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="202" column="1" bodyfile="common.hh" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a26cbb55a7d7118c1ad6b5cbd4cb78138" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr libnokogiri::version_t::version_t</definition>
        <argsstring>(std::uint16_t major, std::uint16_t minor) noexcept</argsstring>
        <name>version_t</name>
        <param>
          <type>std::uint16_t</type>
          <declname>major</declname>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>minor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="206" column="1" bodyfile="common.hh" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a77c0166a7cb8c7f88a82c9e0f0a51d16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>libnokogiri::version_t::version_t</definition>
        <argsstring>(std::nullptr_t) noexcept</argsstring>
        <name>version_t</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="210" column="1" bodyfile="common.hh" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1ad259aec67db41868c7f5ccfa40584866" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::version_t::major</definition>
        <argsstring>() const noexcept</argsstring>
        <name>major</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the major version of the section header </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="214" column="1" bodyfile="common.hh" bodystart="214" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1ac3d90780dca5bc7ca7870a18a966d20c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::version_t::minor</definition>
        <argsstring>() const noexcept</argsstring>
        <name>minor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the minor version of the section header </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="217" column="1" bodyfile="common.hh" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a86244cf61a82a01cb2aac4856c2dbee1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::version_t::operator==</definition>
        <argsstring>(const version_t &amp;ver) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1version__t" kindref="compound">version_t</ref> &amp;</type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="220" column="1" bodyfile="common.hh" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a00041c87d504e820f876fe1a4420feec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::version_t::operator!=</definition>
        <argsstring>(const version_t &amp;ver) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1version__t" kindref="compound">version_t</ref> &amp;</type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="224" column="1" bodyfile="common.hh" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a4f3852486d82d3d25ed424cf288169a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::version_t::operator&gt;</definition>
        <argsstring>(const version_t &amp;ver) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1version__t" kindref="compound">version_t</ref> &amp;</type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="229" column="1" bodyfile="common.hh" bodystart="229" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a2e71556f18e992b6178aa12258ef7c26" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::version_t::operator&gt;=</definition>
        <argsstring>(const version_t &amp;ver) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1version__t" kindref="compound">version_t</ref> &amp;</type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="235" column="1" bodyfile="common.hh" bodystart="235" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1ae26daa9a60766ad133b6278357e60f86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::version_t::operator&lt;</definition>
        <argsstring>(const version_t &amp;ver) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1version__t" kindref="compound">version_t</ref> &amp;</type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="240" column="1" bodyfile="common.hh" bodystart="240" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a417d91818a690b84dec43214c1b22328" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::version_t::operator&lt;=</definition>
        <argsstring>(const version_t &amp;ver) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1version__t" kindref="compound">version_t</ref> &amp;</type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="247" column="1" bodyfile="common.hh" bodystart="247" bodyend="249"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>pcap version information </para>    </briefdescription>
    <detaileddescription>
<para>This structure is just a glorified container for holding version information.</para><para>Both pcapng and the standard pcap formats both use this. </para>    </detaileddescription>
    <location file="common.hh" line="197" column="1" bodyfile="common.hh" bodystart="197" bodyend="250"/>
    <listofallmembers>
      <member refid="structlibnokogiri_1_1version__t_1a0ef00172fa1f2e2f8a6880ee501bce05" prot="private" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>_major</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a27e85a5bcc90c08c4c31547f8982d0b6" prot="private" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>_minor</name></member>
      <member refid="structlibnokogiri_1_1version__t_1ad259aec67db41868c7f5ccfa40584866" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>major</name></member>
      <member refid="structlibnokogiri_1_1version__t_1ac3d90780dca5bc7ca7870a18a966d20c" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>minor</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a00041c87d504e820f876fe1a4420feec" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>operator!=</name></member>
      <member refid="structlibnokogiri_1_1version__t_1ae26daa9a60766ad133b6278357e60f86" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>operator&lt;</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a417d91818a690b84dec43214c1b22328" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>operator&lt;=</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a86244cf61a82a01cb2aac4856c2dbee1" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>operator==</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a4f3852486d82d3d25ed424cf288169a2" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>operator&gt;</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a2e71556f18e992b6178aa12258ef7c26" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>operator&gt;=</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a36a259bbc7fdbd9878e911bb26a13099" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>version_t</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a26cbb55a7d7118c1ad6b5cbd4cb78138" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>version_t</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a77c0166a7cb8c7f88a82c9e0f0a51d16" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>version_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
