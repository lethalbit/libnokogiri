<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structlibnokogiri_1_1version__t" kind="struct" language="C++" prot="public" final="yes">
    <compoundname>libnokogiri::version_t</compoundname>
    <includes refid="common_8hh" local="no">common.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structlibnokogiri_1_1version__t_1a0ef00172fa1f2e2f8a6880ee501bce05" prot="private" static="no" mutable="no">
        <type>std::uint16_t</type>
        <definition>std::uint16_t libnokogiri::version_t::_major</definition>
        <argsstring></argsstring>
        <name>_major</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="356" column="1" bodyfile="common.hh" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1version__t_1a27e85a5bcc90c08c4c31547f8982d0b6" prot="private" static="no" mutable="no">
        <type>std::uint16_t</type>
        <definition>std::uint16_t libnokogiri::version_t::_minor</definition>
        <argsstring></argsstring>
        <name>_minor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="357" column="1" bodyfile="common.hh" bodystart="357" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a36a259bbc7fdbd9878e911bb26a13099" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr libnokogiri::version_t::version_t</definition>
        <argsstring>() noexcept</argsstring>
        <name>version_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="359" column="1" bodyfile="common.hh" bodystart="359" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1af4c37e6f3be36f9bfd4fcac25d27adcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr libnokogiri::version_t::version_t</definition>
        <argsstring>(std::uint16_t vmajor, std::uint16_t vminor) noexcept</argsstring>
        <name>version_t</name>
        <param>
          <type>std::uint16_t</type>
          <declname>vmajor</declname>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>vminor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="363" column="1" bodyfile="common.hh" bodystart="363" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a77c0166a7cb8c7f88a82c9e0f0a51d16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>libnokogiri::version_t::version_t</definition>
        <argsstring>(std::nullptr_t) noexcept</argsstring>
        <name>version_t</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="367" column="1" bodyfile="common.hh" bodystart="367" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a0fa586017d79f8f3bedca85ea64a236d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::version_t::major_version</definition>
        <argsstring>() const noexcept</argsstring>
        <name>major_version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the major version of the section header </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="371" column="1" bodyfile="common.hh" bodystart="371" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1afb76a90bf8bd42a3e3fbbdb496f01080" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::version_t::minor_version</definition>
        <argsstring>() const noexcept</argsstring>
        <name>minor_version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the minor version of the section header </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="374" column="1" bodyfile="common.hh" bodystart="374" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a86244cf61a82a01cb2aac4856c2dbee1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::version_t::operator==</definition>
        <argsstring>(const version_t &amp;ver) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1version__t" kindref="compound">version_t</ref> &amp;</type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if two versions are equal </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="378" column="1" bodyfile="common.hh" bodystart="378" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a00041c87d504e820f876fe1a4420feec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::version_t::operator!=</definition>
        <argsstring>(const version_t &amp;ver) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1version__t" kindref="compound">version_t</ref> &amp;</type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if two versions are not equal </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="383" column="1" bodyfile="common.hh" bodystart="383" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a4f3852486d82d3d25ed424cf288169a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::version_t::operator&gt;</definition>
        <argsstring>(const version_t &amp;ver) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1version__t" kindref="compound">version_t</ref> &amp;</type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if one version is greater than another </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="389" column="1" bodyfile="common.hh" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a2e71556f18e992b6178aa12258ef7c26" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::version_t::operator&gt;=</definition>
        <argsstring>(const version_t &amp;ver) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1version__t" kindref="compound">version_t</ref> &amp;</type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if one version is greater than or equal to another </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="396" column="1" bodyfile="common.hh" bodystart="396" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1ae26daa9a60766ad133b6278357e60f86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::version_t::operator&lt;</definition>
        <argsstring>(const version_t &amp;ver) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1version__t" kindref="compound">version_t</ref> &amp;</type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if one version is less than another </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="402" column="1" bodyfile="common.hh" bodystart="402" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1version__t_1a417d91818a690b84dec43214c1b22328" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::version_t::operator&lt;=</definition>
        <argsstring>(const version_t &amp;ver) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1version__t" kindref="compound">version_t</ref> &amp;</type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if one version is less than or equal to another </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common.hh" line="409" column="1" bodyfile="common.hh" bodystart="409" bodyend="411"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>pcap version information </para>    </briefdescription>
    <detaileddescription>
<para>This structure is just a glorified container for holding version information.</para><para>Both pcapng and the standard pcap formats both use this. </para>    </detaileddescription>
    <location file="common.hh" line="354" column="1" bodyfile="common.hh" bodystart="354" bodyend="412"/>
    <listofallmembers>
      <member refid="structlibnokogiri_1_1version__t_1a0ef00172fa1f2e2f8a6880ee501bce05" prot="private" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>_major</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a27e85a5bcc90c08c4c31547f8982d0b6" prot="private" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>_minor</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a0fa586017d79f8f3bedca85ea64a236d" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>major_version</name></member>
      <member refid="structlibnokogiri_1_1version__t_1afb76a90bf8bd42a3e3fbbdb496f01080" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>minor_version</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a00041c87d504e820f876fe1a4420feec" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>operator!=</name></member>
      <member refid="structlibnokogiri_1_1version__t_1ae26daa9a60766ad133b6278357e60f86" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>operator&lt;</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a417d91818a690b84dec43214c1b22328" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>operator&lt;=</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a86244cf61a82a01cb2aac4856c2dbee1" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>operator==</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a4f3852486d82d3d25ed424cf288169a2" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>operator&gt;</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a2e71556f18e992b6178aa12258ef7c26" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>operator&gt;=</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a36a259bbc7fdbd9878e911bb26a13099" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>version_t</name></member>
      <member refid="structlibnokogiri_1_1version__t_1af4c37e6f3be36f9bfd4fcac25d27adcc" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>version_t</name></member>
      <member refid="structlibnokogiri_1_1version__t_1a77c0166a7cb8c7f88a82c9e0f0a51d16" prot="public" virt="non-virtual"><scope>libnokogiri::version_t</scope><name>version_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
