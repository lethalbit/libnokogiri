<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structlibnokogiri_1_1pcapng_1_1option__t" kind="struct" language="C++" prot="public">
    <compoundname>libnokogiri::pcapng::option_t</compoundname>
    <derivedcompoundref refid="structlibnokogiri_1_1pcapng_1_1options_1_1end__of__options__t" prot="public" virt="non-virtual">libnokogiri::pcapng::options::end_of_options_t</derivedcompoundref>
    <includes refid="option_8hh" local="no">option.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structlibnokogiri_1_1pcapng_1_1option__t_1a4a310cd9cfae911362aaa9cff65639a5" prot="private" static="no" mutable="no">
        <type><ref refid="namespacelibnokogiri_1_1pcapng_1a4480b6a2a138af8cbd0fe98ed4fab3bd" kindref="member">option_type_t</ref></type>
        <definition>option_type_t libnokogiri::pcapng::option_t::_type</definition>
        <argsstring></argsstring>
        <name>_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcapng/option.hh" line="74" column="1" bodyfile="pcapng/option.hh" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1pcapng_1_1option__t_1ad68144d50f7bf782cb5643e080aa5792" prot="private" static="no" mutable="no">
        <type>std::uint16_t</type>
        <definition>std::uint16_t libnokogiri::pcapng::option_t::_length</definition>
        <argsstring></argsstring>
        <name>_length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcapng/option.hh" line="75" column="1" bodyfile="pcapng/option.hh" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1pcapng_1_1option__t_1a693da3fb4f81a4f2220c24c0aa835da4" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool libnokogiri::pcapng::option_t::_multiple_allowed</definition>
        <argsstring></argsstring>
        <name>_multiple_allowed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcapng/option.hh" line="76" column="1" bodyfile="pcapng/option.hh" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structlibnokogiri_1_1pcapng_1_1option__t_1a68a3d5b94ccb258af9431d8f311bd69e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr libnokogiri::pcapng::option_t::option_t</definition>
        <argsstring>(option_type_t type, std::uint16_t length, bool multiple) noexcept</argsstring>
        <name>option_t</name>
        <param>
          <type><ref refid="namespacelibnokogiri_1_1pcapng_1a4480b6a2a138af8cbd0fe98ed4fab3bd" kindref="member">option_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>multiple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcapng/option.hh" line="78" column="1" bodyfile="pcapng/option.hh" bodystart="78" bodyend="80"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structlibnokogiri_1_1pcapng_1_1option__t_1ab243ab6abaf402e95dd12ab950417e51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr libnokogiri::pcapng::option_t::option_t</definition>
        <argsstring>() noexcept</argsstring>
        <name>option_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcapng/option.hh" line="82" column="1" bodyfile="pcapng/option.hh" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcapng_1_1option__t_1a8e74771be5c630bc93a50d24572a92cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacelibnokogiri_1_1pcapng_1a4480b6a2a138af8cbd0fe98ed4fab3bd" kindref="member">option_type_t</ref></type>
        <definition>option_type_t libnokogiri::pcapng::option_t::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the type of the option </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcapng/option.hh" line="88" column="1" bodyfile="pcapng/option.hh" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcapng_1_1option__t_1a280efe65c024745372eefb55c97875b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uint16_t</type>
        <definition>std::uint16_t libnokogiri::pcapng::option_t::length</definition>
        <argsstring>() const noexcept</argsstring>
        <name>length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the length of the option </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcapng/option.hh" line="92" column="1" bodyfile="pcapng/option.hh" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcapng_1_1option__t_1adc80d9c6eed25d0ee3678558b75924aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t libnokogiri::pcapng::option_t::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the total size of this structure as it would be in the pcap file </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcapng/option.hh" line="96" column="1" bodyfile="pcapng/option.hh" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcapng_1_1option__t_1a6b5fe61e5c697dc17370a4378822f819" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::pcapng::option_t::multiple_allowed</definition>
        <argsstring>() const noexcept</argsstring>
        <name>multiple_allowed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets if there can be more than one of this type of option per block </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcapng/option.hh" line="100" column="1" bodyfile="pcapng/option.hh" bodystart="100" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base for all pcapng options. </para>    </briefdescription>
    <detaileddescription>
<para>This structure represents the atomic base for all options defined by libnokogiri as well as by the developer if the add custom options.</para><para>For documentation on how to add new options to libnokogiri see the <computeroutput>Adding Options</computeroutput> section in <computeroutput>Extending libnokogiri</computeroutput></para><para>Options have the following overarching structure:</para><para><programlisting><codeline><highlight class="normal"><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/>0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7<sp/>0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7<sp/>0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7<sp/>0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7</highlight></codeline>
<codeline><highlight class="normal">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Option<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Option<sp/>Length<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline><highlight class="normal">/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Option<sp/>Data<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/</highlight></codeline>
<codeline><highlight class="normal">/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Variable<sp/>Length<sp/>padded<sp/>to<sp/>32<sp/>bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/</highlight></codeline>
<codeline><highlight class="normal">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
</programlisting></para><para><itemizedlist>
<listitem><para><computeroutput>Option Type</computeroutput> is a 16-bit unsigned value describing how to interpret the data</para></listitem><listitem><para><computeroutput>Option Length</computeroutput> is a 16-bit unsigned value describing how long the option data is without padding</para></listitem><listitem><para><computeroutput>Option Data</computeroutput> is optional, and depends on <computeroutput>Option Type</computeroutput></para></listitem></itemizedlist>
</para><para>Options are collected into a contiguous block which is then suffixed with a special option value to indicate the end of an option block.</para><para>The termination option is a single option with the type of <computeroutput>0x0000</computeroutput> and the length of <computeroutput>0x0000</computeroutput>. However, the assumption that this termination option is present can not be made (for some reason, ask the RFC committee, I don&apos;t fucking know).</para><para>For safety, when you construct a default empty base <ref refid="structlibnokogiri_1_1pcapng_1_1option__t" kindref="compound">option_t</ref>, it will act the same as an <ref refid="structlibnokogiri_1_1pcapng_1_1options_1_1end__of__options__t" kindref="compound">options::end_of_options_t</ref> . </para>    </detaileddescription>
    <inheritancegraph>
      <node id="16">
        <label>libnokogiri::pcapng::option_t</label>
        <link refid="structlibnokogiri_1_1pcapng_1_1option__t"/>
      </node>
      <node id="17">
        <label>libnokogiri::pcapng::options::end_of_options_t</label>
        <link refid="structlibnokogiri_1_1pcapng_1_1options_1_1end__of__options__t"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="pcapng/option.hh" line="72" column="1" bodyfile="pcapng/option.hh" bodystart="72" bodyend="101"/>
    <listofallmembers>
      <member refid="structlibnokogiri_1_1pcapng_1_1option__t_1ad68144d50f7bf782cb5643e080aa5792" prot="private" virt="non-virtual"><scope>libnokogiri::pcapng::option_t</scope><name>_length</name></member>
      <member refid="structlibnokogiri_1_1pcapng_1_1option__t_1a693da3fb4f81a4f2220c24c0aa835da4" prot="private" virt="non-virtual"><scope>libnokogiri::pcapng::option_t</scope><name>_multiple_allowed</name></member>
      <member refid="structlibnokogiri_1_1pcapng_1_1option__t_1a4a310cd9cfae911362aaa9cff65639a5" prot="private" virt="non-virtual"><scope>libnokogiri::pcapng::option_t</scope><name>_type</name></member>
      <member refid="structlibnokogiri_1_1pcapng_1_1option__t_1a280efe65c024745372eefb55c97875b6" prot="public" virt="non-virtual"><scope>libnokogiri::pcapng::option_t</scope><name>length</name></member>
      <member refid="structlibnokogiri_1_1pcapng_1_1option__t_1a6b5fe61e5c697dc17370a4378822f819" prot="public" virt="non-virtual"><scope>libnokogiri::pcapng::option_t</scope><name>multiple_allowed</name></member>
      <member refid="structlibnokogiri_1_1pcapng_1_1option__t_1a68a3d5b94ccb258af9431d8f311bd69e" prot="protected" virt="non-virtual"><scope>libnokogiri::pcapng::option_t</scope><name>option_t</name></member>
      <member refid="structlibnokogiri_1_1pcapng_1_1option__t_1ab243ab6abaf402e95dd12ab950417e51" prot="public" virt="non-virtual"><scope>libnokogiri::pcapng::option_t</scope><name>option_t</name></member>
      <member refid="structlibnokogiri_1_1pcapng_1_1option__t_1adc80d9c6eed25d0ee3678558b75924aa" prot="public" virt="non-virtual"><scope>libnokogiri::pcapng::option_t</scope><name>size</name></member>
      <member refid="structlibnokogiri_1_1pcapng_1_1option__t_1a8e74771be5c630bc93a50d24572a92cc" prot="public" virt="non-virtual"><scope>libnokogiri::pcapng::option_t</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
