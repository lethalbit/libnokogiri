<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t" kind="struct" language="C++" prot="public" final="yes">
    <compoundname>libnokogiri::pcap::packet_header_modified_t</compoundname>
    <includes refid="packet_8hh" local="no">packet.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a0f1f768038691355390858ed0684886e" prot="private" static="no" mutable="no">
        <type><ref refid="structlibnokogiri_1_1pcap_1_1packet__header__t" kindref="compound">packet_header_t</ref></type>
        <definition>packet_header_t libnokogiri::pcap::packet_header_modified_t::_base_header</definition>
        <argsstring></argsstring>
        <name>_base_header</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="137" column="1" bodyfile="pcap/packet.hh" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1ada3918260c161dfe7b19ce926d300f35" prot="private" static="no" mutable="no">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::pcap::packet_header_modified_t::_if_index</definition>
        <argsstring></argsstring>
        <name>_if_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="138" column="1" bodyfile="pcap/packet.hh" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a912d68bb189f4ff6d274ea52167c8999" prot="private" static="no" mutable="no">
        <type>std::uint16_t</type>
        <definition>std::uint16_t libnokogiri::pcap::packet_header_modified_t::_proto</definition>
        <argsstring></argsstring>
        <name>_proto</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="139" column="1" bodyfile="pcap/packet.hh" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1abb5ae280e1c9085f246422481f266dfa" prot="private" static="no" mutable="no">
        <type>std::uint8_t</type>
        <definition>std::uint8_t libnokogiri::pcap::packet_header_modified_t::_type</definition>
        <argsstring></argsstring>
        <name>_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="140" column="1" bodyfile="pcap/packet.hh" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a8fd4a09d97337f1d1d91fd82b7c04a42" prot="private" static="no" mutable="no">
        <type>std::uint8_t</type>
        <definition>std::uint8_t libnokogiri::pcap::packet_header_modified_t::_padding</definition>
        <argsstring></argsstring>
        <name>_padding</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="141" column="1" bodyfile="pcap/packet.hh" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a81aa37b1ef69e193ba56f51389f51936" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr libnokogiri::pcap::packet_header_modified_t::packet_header_modified_t</definition>
        <argsstring>() noexcept</argsstring>
        <name>packet_header_modified_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="143" column="1" bodyfile="pcap/packet.hh" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1ac71fde773d13ab318e1bec2956492c03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr libnokogiri::pcap::packet_header_modified_t::packet_header_modified_t</definition>
        <argsstring>(packet_header_t &amp;&amp;base_header, std::uint32_t if_index, std::uint16_t protocol, std::uint8_t type) noexcept</argsstring>
        <name>packet_header_modified_t</name>
        <param>
          <type><ref refid="structlibnokogiri_1_1pcap_1_1packet__header__t" kindref="compound">packet_header_t</ref> &amp;&amp;</type>
          <declname>base_header</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>if_index</declname>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>std::uint8_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="147" column="1" bodyfile="pcap/packet.hh" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a5b4aa06001df4e422366006d32c45dff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>libnokogiri::pcap::packet_header_modified_t::packet_header_modified_t</definition>
        <argsstring>(std::nullptr_t) noexcept</argsstring>
        <name>packet_header_modified_t</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="152" column="1" bodyfile="pcap/packet.hh" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a85120c91c161baf2f4788736c7337510" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structlibnokogiri_1_1pcap_1_1packet__header__t" kindref="compound">packet_header_t</ref></type>
        <definition>const packet_header_t libnokogiri::pcap::packet_header_modified_t::base_header</definition>
        <argsstring>() const noexcept</argsstring>
        <name>base_header</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the base packet header </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="156" column="1" bodyfile="pcap/packet.hh" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1af79884c4df05bcd9fb4302277bccf59e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void libnokogiri::pcap::packet_header_modified_t::base_header</definition>
        <argsstring>(packet_header_t base_header) noexcept</argsstring>
        <name>base_header</name>
        <param>
          <type><ref refid="structlibnokogiri_1_1pcap_1_1packet__header__t" kindref="compound">packet_header_t</ref></type>
          <declname>base_header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the base packet header </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="158" column="1" bodyfile="pcap/packet.hh" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1aecefe500478e0b79f1c34331f5362a7f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::pcap::packet_header_modified_t::interface_index</definition>
        <argsstring>() const noexcept</argsstring>
        <name>interface_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the interface index for this packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="162" column="1" bodyfile="pcap/packet.hh" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a23dbd8346862d11df3b1195ef8d77ccf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void libnokogiri::pcap::packet_header_modified_t::interface_index</definition>
        <argsstring>(std::uint32_t interface_index) noexcept</argsstring>
        <name>interface_index</name>
        <param>
          <type>std::uint32_t</type>
          <declname>interface_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the interface index for this packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="164" column="1" bodyfile="pcap/packet.hh" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1afdc05fee90005200b34482b46eccb1f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uint16_t</type>
        <definition>std::uint16_t libnokogiri::pcap::packet_header_modified_t::protocol</definition>
        <argsstring>() const noexcept</argsstring>
        <name>protocol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve protocol type for this packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="168" column="1" bodyfile="pcap/packet.hh" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a8f52653583d599396e2cd33201184c09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void libnokogiri::pcap::packet_header_modified_t::protocol</definition>
        <argsstring>(std::uint16_t protocol) noexcept</argsstring>
        <name>protocol</name>
        <param>
          <type>std::uint16_t</type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set protocol type for this packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="170" column="1" bodyfile="pcap/packet.hh" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1aaeb34ff208e5b5772e97675002901c31" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t libnokogiri::pcap::packet_header_modified_t::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the type of this packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="174" column="1" bodyfile="pcap/packet.hh" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a52b308a8be3358f5c3db81f3b098b29b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void libnokogiri::pcap::packet_header_modified_t::type</definition>
        <argsstring>(std::uint8_t type) noexcept</argsstring>
        <name>type</name>
        <param>
          <type>std::uint8_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the type of this packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="176" column="1" bodyfile="pcap/packet.hh" bodystart="176" bodyend="176"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The packet header for the patched version of libpcap. </para>    </briefdescription>
    <detaileddescription>
<para>This header is an extension of the normal packet header, it adds four fields to the end of the traditional header.</para><para>The packet headers have the following structure</para><para><programlisting><codeline><highlight class="normal"><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/>0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7<sp/>0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7<sp/>0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7<sp/>0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7</highlight></codeline>
<codeline><highlight class="normal">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Packet<sp/>Header<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Interface<sp/>Index<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Protocol<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>Padding<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para><computeroutput>Packet Header</computeroutput> - The standard pcap packet header represented by the <ref refid="structlibnokogiri_1_1pcap_1_1packet__header__t" kindref="compound">libnokogiri::pcap::packet_header_t</ref> structure.</para></listitem><listitem><para><computeroutput>Interface Index</computeroutput> - An unsigned 32-bit integer representing the index of the interface on which the capturing machine this packet came from.</para></listitem><listitem><para><computeroutput>Protocol</computeroutput> - An unsigned 16-bit value representing the Ethernet packet type. Not to be confused with <computeroutput>Type</computeroutput>.</para></listitem><listitem><para><computeroutput>Type</computeroutput> - An unsigned 8-bit value representing if the packet was broadcast/multicast/etc.</para></listitem><listitem><para><computeroutput>Padding</computeroutput> - 8-bits of padding to pad the structure to a 32-bit boundary. </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="pcap/packet.hh" line="135" column="1" bodyfile="pcap/packet.hh" bodystart="135" bodyend="177"/>
    <listofallmembers>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a0f1f768038691355390858ed0684886e" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>_base_header</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1ada3918260c161dfe7b19ce926d300f35" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>_if_index</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a8fd4a09d97337f1d1d91fd82b7c04a42" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>_padding</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a912d68bb189f4ff6d274ea52167c8999" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>_proto</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1abb5ae280e1c9085f246422481f266dfa" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>_type</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a85120c91c161baf2f4788736c7337510" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>base_header</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1af79884c4df05bcd9fb4302277bccf59e" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>base_header</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1aecefe500478e0b79f1c34331f5362a7f" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>interface_index</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a23dbd8346862d11df3b1195ef8d77ccf" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>interface_index</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a81aa37b1ef69e193ba56f51389f51936" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>packet_header_modified_t</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1ac71fde773d13ab318e1bec2956492c03" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>packet_header_modified_t</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a5b4aa06001df4e422366006d32c45dff" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>packet_header_modified_t</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1afdc05fee90005200b34482b46eccb1f5" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>protocol</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a8f52653583d599396e2cd33201184c09" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>protocol</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1aaeb34ff208e5b5772e97675002901c31" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>type</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t_1a52b308a8be3358f5c3db81f3b098b29b" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_modified_t</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
