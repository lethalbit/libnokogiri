<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structlibnokogiri_1_1pcap_1_1packet__t" kind="struct" language="C++" prot="public" final="yes">
    <compoundname>libnokogiri::pcap::packet_t</compoundname>
    <includes refid="pcap_8hh" local="no">pcap.hh</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename U</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structlibnokogiri_1_1pcap_1_1packet__t_1a2f36c5dab04be86f0c6a5e397a07e0af" prot="public" static="no">
        <type>std::optional&lt; std::unique_ptr&lt; U &gt; &gt;</type>
        <definition>using libnokogiri::pcap::packet_t&lt; T, U &gt;::data_t =  std::optional&lt;std::unique_ptr&lt;U&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>data_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap.hh" line="300" column="1" bodyfile="pcap.hh" bodystart="300" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__t_1a9cd71fbaa091a86c6c2265bcce681f1f" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T libnokogiri::pcap::packet_t&lt; T, U &gt;::_packet_header</definition>
        <argsstring></argsstring>
        <name>_packet_header</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap.hh" line="302" column="1" bodyfile="pcap.hh" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__t_1a0faf1413f1724c9b9a2d6e1f298dc910" prot="private" static="no" mutable="no">
        <type>std::uintptr_t</type>
        <definition>std::uintptr_t libnokogiri::pcap::packet_t&lt; T, U &gt;::_offset</definition>
        <argsstring></argsstring>
        <name>_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap.hh" line="303" column="1" bodyfile="pcap.hh" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__t_1ac5558579daf495af7840225ea4f6bb19" prot="private" static="no" mutable="no">
        <type>data_t</type>
        <definition>data_t libnokogiri::pcap::packet_t&lt; T, U &gt;::_data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap.hh" line="304" column="1" bodyfile="pcap.hh" bodystart="304" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a2c89aeef76d58fa0b6460039504994fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr libnokogiri::pcap::packet_t&lt; T, U &gt;::packet_t</definition>
        <argsstring>() noexcept</argsstring>
        <name>packet_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap.hh" line="306" column="1" bodyfile="pcap.hh" bodystart="306" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1aa10295eebf01fa9d13e1647034e8bd33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr libnokogiri::pcap::packet_t&lt; T, U &gt;::packet_t</definition>
        <argsstring>(T header, std::uintptr_t offset, data_t data) noexcept</argsstring>
        <name>packet_t</name>
        <param>
          <type>T</type>
          <declname>header</declname>
        </param>
        <param>
          <type>std::uintptr_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>data_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap.hh" line="310" column="1" bodyfile="pcap.hh" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1ad56bdf16c44b986cb77f076d40926f2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T libnokogiri::pcap::packet_t&lt; T, U &gt;::header</definition>
        <argsstring>() const noexcept</argsstring>
        <name>header</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the packet header </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap.hh" line="316" column="1" bodyfile="pcap.hh" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a805d73e5f3d12d79904595634b264a73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void libnokogiri::pcap::packet_t&lt; T, U &gt;::header</definition>
        <argsstring>(T header) noexcept</argsstring>
        <name>header</name>
        <param>
          <type>T</type>
          <declname>header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the packet header </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap.hh" line="318" column="1" bodyfile="pcap.hh" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1aa984222ae3505097aeb4a1325ce23e7e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uintptr_t</type>
        <definition>std::uintptr_t libnokogiri::pcap::packet_t&lt; T, U &gt;::packet_offset</definition>
        <argsstring>() const noexcept</argsstring>
        <name>packet_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the offset in the file the packet is located at </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap.hh" line="322" column="1" bodyfile="pcap.hh" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a9540cc1ada7e66c68618eda85d875e76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void libnokogiri::pcap::packet_t&lt; T, U &gt;::packet_offset</definition>
        <argsstring>(std::uintptr_t packet_offset) noexcept</argsstring>
        <name>packet_offset</name>
        <param>
          <type>std::uintptr_t</type>
          <declname>packet_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the offset in the file the packet is located at </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap.hh" line="324" column="1" bodyfile="pcap.hh" bodystart="324" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a83f8998f80456797e453abd7016b6ca2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>data_t</type>
        <definition>data_t libnokogiri::pcap::packet_t&lt; T, U &gt;::packet_data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>packet_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the packet data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap.hh" line="328" column="1" bodyfile="pcap.hh" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1aac5616a323ad92d29a0613f3c85c0a83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void libnokogiri::pcap::packet_t&lt; T, U &gt;::packet_data</definition>
        <argsstring>(data_t packet_data) noexcept</argsstring>
        <name>packet_data</name>
        <param>
          <type>data_t</type>
          <declname>packet_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the packet data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap.hh" line="330" column="1" bodyfile="pcap.hh" bodystart="330" bodyend="330"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>pcap packet template </para>    </briefdescription>
    <detaileddescription>
<para>This template provides the framework for reading and writing packets.</para><para>They can have custom headers, but the two standardized packets are already specified as <ref refid="namespacelibnokogiri_1_1pcap_1a965b52b3bfb8d95a3dbcaadb074c5589" kindref="member">libnokogiri::pcap::generic_packet_t</ref> and <ref refid="namespacelibnokogiri_1_1pcap_1a826df232831a75e6a2d4cf4693dccee1" kindref="member">libnokogiri::pcap::modified_packet_t</ref> .</para><para>All this template does is change out the packet header type, the rest of the logic is identical. </para>    </detaileddescription>
    <location file="pcap.hh" line="298" column="1" bodyfile="pcap.hh" bodystart="298" bodyend="331"/>
    <listofallmembers>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1ac5558579daf495af7840225ea4f6bb19" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>_data</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a0faf1413f1724c9b9a2d6e1f298dc910" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>_offset</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a9cd71fbaa091a86c6c2265bcce681f1f" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>_packet_header</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a2f36c5dab04be86f0c6a5e397a07e0af" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>data_t</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1ad56bdf16c44b986cb77f076d40926f2d" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>header</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a805d73e5f3d12d79904595634b264a73" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>header</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a83f8998f80456797e453abd7016b6ca2" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>packet_data</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1aac5616a323ad92d29a0613f3c85c0a83" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>packet_data</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1aa984222ae3505097aeb4a1325ce23e7e" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>packet_offset</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a9540cc1ada7e66c68618eda85d875e76" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>packet_offset</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a2c89aeef76d58fa0b6460039504994fd" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>packet_t</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1aa10295eebf01fa9d13e1647034e8bd33" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>packet_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
