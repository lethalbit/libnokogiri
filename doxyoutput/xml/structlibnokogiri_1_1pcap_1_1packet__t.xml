<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structlibnokogiri_1_1pcap_1_1packet__t" kind="struct" language="C++" prot="public">
    <compoundname>libnokogiri::pcap::packet_t</compoundname>
    <includes refid="packet_8hh" local="no">packet.hh</includes>
    <briefdescription>
<para>pcap packet template </para>    </briefdescription>
    <detaileddescription>
<para>Retrieve the packet header</para><para>Set the packet header</para><para>Retrieve the offset in the file the packet is located at</para><para>Set the offset in the file the packet is located at</para><para>Retrieve the packet data</para><para>Set the packet data</para><para>Type alias for generic conforming pcap packets with the standard header</para><para>Type alias for packets from the modified pcap files</para><para>This template provides the framework for reading and writing packets.</para><para>They can have custom headers, but the two standardized packets are already specified as libnokogiri::pcap::generic_packet_t and libnokogiri::pcap::modified_packet_t .</para><para>All this template does is change out the packet header type, the rest of the logic is identical. </para>    </detaileddescription>
    <location file="pcap/packet.hh" line="234" column="1" bodyfile="pcap/packet.hh" bodystart="234" bodyend="236"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
