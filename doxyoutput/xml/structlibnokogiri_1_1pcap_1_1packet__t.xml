<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structlibnokogiri_1_1pcap_1_1packet__t" kind="struct" language="C++" prot="public">
    <compoundname>libnokogiri::pcap::packet_t</compoundname>
    <includes refid="packet_8hh" local="no">packet.hh</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structlibnokogiri_1_1pcap_1_1packet__t_1a1a9bfe19b1ab25a6c2aca14f5edb5cff" prot="public" static="no">
        <type>std::variant&lt; std::monostate, <ref refid="structlibnokogiri_1_1pcap_1_1packet__header__t" kindref="compound">packet_header_t</ref>, <ref refid="structlibnokogiri_1_1pcap_1_1packet__header__modified__t" kindref="compound">packet_header_modified_t</ref> &gt;</type>
        <definition>using libnokogiri::pcap::packet_t::pkt_header_t =  std::variant&lt; std::monostate, packet_header_t, packet_header_modified_t &gt;</definition>
        <argsstring></argsstring>
        <name>pkt_header_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="257" column="1" bodyfile="pcap/packet.hh" bodystart="261" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__t_1a49414e3c2b1b24dd2059da10c3cdcd18" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>std::vector&lt;std::uint8_t&gt; libnokogiri::pcap::packet_t::_raw_data</definition>
        <argsstring></argsstring>
        <name>_raw_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="263" column="1" bodyfile="pcap/packet.hh" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__t_1a628ce98a2439eb8cd28112762bf24443" prot="private" static="no" mutable="no">
        <type>pkt_header_t</type>
        <definition>pkt_header_t libnokogiri::pcap::packet_t::_packet_header</definition>
        <argsstring></argsstring>
        <name>_packet_header</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="264" column="1" bodyfile="pcap/packet.hh" bodystart="264" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a060fc430977d7681d8e8a62b7300e587" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_pod_v&lt; T &gt; &amp;&amp;!libnokogiri::internal::has_nullable_ctor_v&lt; T &gt; &amp;&amp;!std::is_same_v&lt; T, void * &gt;, T * &gt;</type>
        <definition>std::enable_if_t&lt; std::is_pod_v&lt;T&gt; &amp;&amp; !libnokogiri::internal::has_nullable_ctor_v&lt;T&gt; &amp;&amp; !std::is_same_v&lt;T, void*&gt;, T*&gt; libnokogiri::pcap::packet_t::index</definition>
        <argsstring>(const std::size_t offset)</argsstring>
        <name>index</name>
        <param>
          <type>const std::size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="273" column="1" bodyfile="pcap/packet.hh" bodystart="273" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a926e7873284da879af99eb26bae63ca7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; libnokogiri::internal::has_nullable_ctor_v&lt; T &gt; &amp;&amp;!std::is_same_v&lt; T, void * &gt;, T * &gt;</type>
        <definition>std::enable_if_t&lt; libnokogiri::internal::has_nullable_ctor_v&lt;T&gt; &amp;&amp; !std::is_same_v&lt;T, void*&gt;, T*&gt; libnokogiri::pcap::packet_t::index</definition>
        <argsstring>(const std::size_t offset)</argsstring>
        <name>index</name>
        <param>
          <type>const std::size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="286" column="1" bodyfile="pcap/packet.hh" bodystart="286" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1ac1ee579d1f73898642bc483d3becbb1d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same_v&lt; T, void * &gt;, void * &gt;</type>
        <definition>std::enable_if_t&lt;std::is_same_v&lt;T, void*&gt;, void*&gt; libnokogiri::pcap::packet_t::index</definition>
        <argsstring>(const std::size_t offset)</argsstring>
        <name>index</name>
        <param>
          <type>const std::size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="296" column="1" bodyfile="pcap/packet.hh" bodystart="296" bodyend="301"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1ac497729fb243d73126da28a21621a814" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>libnokogiri::pcap::packet_t::packet_t</definition>
        <argsstring>(std::size_t length, pkt_header_t header={}) noexcept</argsstring>
        <name>packet_t</name>
        <param>
          <type>std::size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>pkt_header_t</type>
          <declname>header</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="305" column="1" bodyfile="pcap/packet.hh" bodystart="305" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a45f065fd450dbec01fe08404f78aab75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libnokogiri::pcap::packet_t::packet_t</definition>
        <argsstring>(const packet_t &amp;)=delete</argsstring>
        <name>packet_t</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1pcap_1_1packet__t" kindref="compound">packet_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a6fcb7212de79faf82412cbd4cb9cda9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlibnokogiri_1_1pcap_1_1packet__t" kindref="compound">packet_t</ref> &amp;</type>
        <definition>packet_t&amp; libnokogiri::pcap::packet_t::operator=</definition>
        <argsstring>(const packet_t &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1pcap_1_1packet__t" kindref="compound">packet_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a47b2e8aa3f34ba46d05e9d4b88986844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libnokogiri::pcap::packet_t::packet_t</definition>
        <argsstring>(packet_t &amp;&amp;)=default</argsstring>
        <name>packet_t</name>
        <param>
          <type><ref refid="structlibnokogiri_1_1pcap_1_1packet__t" kindref="compound">packet_t</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a613e364d2b5fc8559c817d350c0a38ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlibnokogiri_1_1pcap_1_1packet__t" kindref="compound">packet_t</ref> &amp;</type>
        <definition>packet_t&amp; libnokogiri::pcap::packet_t::operator=</definition>
        <argsstring>(packet_t &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structlibnokogiri_1_1pcap_1_1packet__t" kindref="compound">packet_t</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a0872afe159779fc333baac232c9bc330" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t libnokogiri::pcap::packet_t::length</definition>
        <argsstring>() const noexcept</argsstring>
        <name>length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="317" column="1" bodyfile="pcap/packet.hh" bodystart="317" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1acb40b196db7391c844015e457144a126" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pkt_header_t &amp;</type>
        <definition>pkt_header_t&amp; libnokogiri::pcap::packet_t::header</definition>
        <argsstring>() noexcept</argsstring>
        <name>header</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="320" column="1" bodyfile="pcap/packet.hh" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a73fa8a4a97d5063840cd15c3db59c4e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::pcap::packet_t::is_complete</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_complete</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="323" column="1" bodyfile="pcap/packet.hh" bodystart="323" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1abd14e5035fdaa10576e41f03d8fa045a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T&amp; libnokogiri::pcap::packet_t::as</definition>
        <argsstring>()</argsstring>
        <name>as</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="338" column="1" bodyfile="pcap/packet.hh" bodystart="338" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1af34e0b14b7d03071cb63739d5acc2e2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* libnokogiri::pcap::packet_t::operator[]</definition>
        <argsstring>(const off_t idx)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const off_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="342" column="1" bodyfile="pcap/packet.hh" bodystart="342" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a7515f9a8713ec5c5e9d4104115a02198" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto libnokogiri::pcap::packet_t::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="345" column="1" bodyfile="pcap/packet.hh" bodystart="345" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1abe061a31e4a6e6b3b53bc57110ed773a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto libnokogiri::pcap::packet_t::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="347" column="1" bodyfile="pcap/packet.hh" bodystart="347" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a38b865c098384141fbde28a96d573f05" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* libnokogiri::pcap::packet_t::operator[]</definition>
        <argsstring>(const off_t idx) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const off_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="351" column="1" bodyfile="pcap/packet.hh" bodystart="351" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a735a97098095006b9e3a88a6da63d6bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* libnokogiri::pcap::packet_t::at</definition>
        <argsstring>(const off_t idx)</argsstring>
        <name>at</name>
        <param>
          <type>const off_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="355" column="1" bodyfile="pcap/packet.hh" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1af0e1dbca669217602910e47c968a2690" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* libnokogiri::pcap::packet_t::at</definition>
        <argsstring>(const off_t idx) const</argsstring>
        <name>at</name>
        <param>
          <type>const off_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="359" column="1" bodyfile="pcap/packet.hh" bodystart="359" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__t_1a2d558814b6f874ef89808f737924cad6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* libnokogiri::pcap::packet_t::address</definition>
        <argsstring>(const off_t offset) noexcept</argsstring>
        <name>address</name>
        <param>
          <type>const off_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="361" column="1" bodyfile="pcap/packet.hh" bodystart="361" bodyend="361"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>pcap packet template </para>    </briefdescription>
    <detaileddescription>
<para>Retrieve the packet header</para><para>Set the packet header</para><para>Retrieve the offset in the file the packet is located at</para><para>Set the offset in the file the packet is located at</para><para>Retrieve the packet data</para><para>Set the packet data</para><para>Type alias for generic conforming pcap packets with the standard header</para><para>Type alias for packets from the modified pcap files</para><para>This template provides the framework for reading and writing packets.</para><para>They can have custom headers, but the two standardized packets are already specified as libnokogiri::pcap::generic_packet_t and libnokogiri::pcap::modified_packet_t .</para><para>All this template does is change out the packet header type, the rest of the logic is identical. </para>    </detaileddescription>
    <location file="pcap/packet.hh" line="255" column="1" bodyfile="pcap/packet.hh" bodystart="255" bodyend="362"/>
    <listofallmembers>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a628ce98a2439eb8cd28112762bf24443" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>_packet_header</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a49414e3c2b1b24dd2059da10c3cdcd18" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>_raw_data</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a2d558814b6f874ef89808f737924cad6" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>address</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1abd14e5035fdaa10576e41f03d8fa045a" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>as</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a735a97098095006b9e3a88a6da63d6bb" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>at</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1af0e1dbca669217602910e47c968a2690" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>at</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a7515f9a8713ec5c5e9d4104115a02198" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>begin</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1abe061a31e4a6e6b3b53bc57110ed773a" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>end</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1acb40b196db7391c844015e457144a126" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>header</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a060fc430977d7681d8e8a62b7300e587" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>index</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a926e7873284da879af99eb26bae63ca7" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>index</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1ac1ee579d1f73898642bc483d3becbb1d" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>index</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a73fa8a4a97d5063840cd15c3db59c4e5" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>is_complete</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a0872afe159779fc333baac232c9bc330" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>length</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a6fcb7212de79faf82412cbd4cb9cda9f" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>operator=</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a613e364d2b5fc8559c817d350c0a38ee" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>operator=</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1af34e0b14b7d03071cb63739d5acc2e2a" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>operator[]</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a38b865c098384141fbde28a96d573f05" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>operator[]</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1ac497729fb243d73126da28a21621a814" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>packet_t</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a45f065fd450dbec01fe08404f78aab75" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>packet_t</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a47b2e8aa3f34ba46d05e9d4b88986844" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>packet_t</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__t_1a1a9bfe19b1ab25a6c2aca14f5edb5cff" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_t</scope><name>pkt_header_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
