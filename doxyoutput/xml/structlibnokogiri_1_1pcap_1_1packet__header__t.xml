<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structlibnokogiri_1_1pcap_1_1packet__header__t" kind="struct" language="C++" prot="public" final="yes">
    <compoundname>libnokogiri::pcap::packet_header_t</compoundname>
    <includes refid="packet_8hh" local="no">packet.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a02c1523a85e0365ef563d0ea183fa0a9" prot="private" static="no" mutable="no">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::pcap::packet_header_t::_timestamp</definition>
        <argsstring></argsstring>
        <name>_timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="70" column="1" bodyfile="pcap/packet.hh" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1ae2f0441abcde10c7448062ba24693c07" prot="private" static="no" mutable="no">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::pcap::packet_header_t::_usecs</definition>
        <argsstring></argsstring>
        <name>_usecs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="71" column="1" bodyfile="pcap/packet.hh" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a2aa97456b3fdc78bc29e90a860892e66" prot="private" static="no" mutable="no">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::pcap::packet_header_t::_have</definition>
        <argsstring></argsstring>
        <name>_have</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="72" column="1" bodyfile="pcap/packet.hh" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a302e31323881cd7a9ab81f4142e6042d" prot="private" static="no" mutable="no">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::pcap::packet_header_t::_was</definition>
        <argsstring></argsstring>
        <name>_was</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="73" column="1" bodyfile="pcap/packet.hh" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a524190e5a0737d4f035d556fc05434d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr libnokogiri::pcap::packet_header_t::packet_header_t</definition>
        <argsstring>() noexcept</argsstring>
        <name>packet_header_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="75" column="1" bodyfile="pcap/packet.hh" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a9d349d11b68074cb627431a8d7367e14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr libnokogiri::pcap::packet_header_t::packet_header_t</definition>
        <argsstring>(std::uint32_t timestamp, std::uint32_t useconds, std::uint32_t pkt_len_have, std::uint32_t pkt_len_actual) noexcept</argsstring>
        <name>packet_header_t</name>
        <param>
          <type>std::uint32_t</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>useconds</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>pkt_len_have</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>pkt_len_actual</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="79" column="1" bodyfile="pcap/packet.hh" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a5674794d6e3070e4efa36f52809e1c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libnokogiri::pcap::packet_header_t::packet_header_t</definition>
        <argsstring>(const packet_header_t &amp;)=delete</argsstring>
        <name>packet_header_t</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1pcap_1_1packet__header__t" kindref="compound">packet_header_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1ab064c23fe90c1d19643c45fbcb178d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlibnokogiri_1_1pcap_1_1packet__header__t" kindref="compound">packet_header_t</ref> &amp;</type>
        <definition>packet_header_t&amp; libnokogiri::pcap::packet_header_t::operator=</definition>
        <argsstring>(const packet_header_t &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structlibnokogiri_1_1pcap_1_1packet__header__t" kindref="compound">packet_header_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a0009013b412e71f1fb7b4d3e3bb55a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>libnokogiri::pcap::packet_header_t::packet_header_t</definition>
        <argsstring>(packet_header_t &amp;&amp;)=default</argsstring>
        <name>packet_header_t</name>
        <param>
          <type><ref refid="structlibnokogiri_1_1pcap_1_1packet__header__t" kindref="compound">packet_header_t</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a9d682a640219a15ce19ccb7c86145e85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlibnokogiri_1_1pcap_1_1packet__header__t" kindref="compound">packet_header_t</ref> &amp;</type>
        <definition>packet_header_t&amp; libnokogiri::pcap::packet_header_t::operator=</definition>
        <argsstring>(packet_header_t &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structlibnokogiri_1_1pcap_1_1packet__header__t" kindref="compound">packet_header_t</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a9cd419a7db50fb2599573cf9b6c92a76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::pcap::packet_header_t::timestamp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the packets timestamp </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="92" column="1" bodyfile="pcap/packet.hh" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a3cc64e6e0a591efbacf1a2cc99738fee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void libnokogiri::pcap::packet_header_t::timestamp</definition>
        <argsstring>(const std::uint32_t timestamp) noexcept</argsstring>
        <name>timestamp</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the packet timestamp </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="94" column="1" bodyfile="pcap/packet.hh" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a4fc89050bbdc58c0bed871de2054df80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::pcap::packet_header_t::useconds</definition>
        <argsstring>() const noexcept</argsstring>
        <name>useconds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the micro/nano second value for the packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="98" column="1" bodyfile="pcap/packet.hh" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1aca62c83d1041af332dbeec0a84493255" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void libnokogiri::pcap::packet_header_t::useconds</definition>
        <argsstring>(const std::uint32_t useconds) noexcept</argsstring>
        <name>useconds</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>useconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the micro/nano second value for the packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="100" column="1" bodyfile="pcap/packet.hh" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a03cb5d9a6130e49093cfc4cc0d9b8cf3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::pcap::packet_header_t::captured_len</definition>
        <argsstring>() const noexcept</argsstring>
        <name>captured_len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the captured length of the packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="104" column="1" bodyfile="pcap/packet.hh" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a9b3b72b9c7ffc8020d2c21eb5d97d4e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void libnokogiri::pcap::packet_header_t::captured_len</definition>
        <argsstring>(const std::uint32_t captured_len) noexcept</argsstring>
        <name>captured_len</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>captured_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the captured length of the packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="106" column="1" bodyfile="pcap/packet.hh" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1ae0d03678cf71fbfccf6d1fa8b52d4be2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t libnokogiri::pcap::packet_header_t::actual_len</definition>
        <argsstring>() const noexcept</argsstring>
        <name>actual_len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the actual length of the packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="110" column="1" bodyfile="pcap/packet.hh" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1ab6ff365c35ec8a80e5bc768d2ea5046e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void libnokogiri::pcap::packet_header_t::actual_len</definition>
        <argsstring>(const std::uint32_t actual_len) noexcept</argsstring>
        <name>actual_len</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>actual_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the actual length of the packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="112" column="1" bodyfile="pcap/packet.hh" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="structlibnokogiri_1_1pcap_1_1packet__header__t_1a6a765377ff1a056fd5c84e3d935d710c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool libnokogiri::pcap::packet_header_t::full_packet</definition>
        <argsstring>() const noexcept</argsstring>
        <name>full_packet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if the packet represented by this header is a full packet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pcap/packet.hh" line="116" column="1" bodyfile="pcap/packet.hh" bodystart="116" bodyend="116"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The packet header for normal unmodified pcap file packets. </para>    </briefdescription>
    <detaileddescription>
<para>This structure represents the header that is prior to each block of packet data.</para><para>The packet headers have the following structure</para><para><programlisting><codeline><highlight class="normal"><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/>0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7<sp/>0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7<sp/>0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7<sp/>0<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7</highlight></codeline>
<codeline><highlight class="normal">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Seconds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Microseconds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Captured<sp/>Length<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Full<sp/>Packet<sp/>Length<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
</programlisting></para><para><itemizedlist>
<listitem><para><computeroutput>Seconds</computeroutput> - An unsigned 32-bit unix timestamp when the packet was captured. This can be adjusted to GMT with the timezone offset in the file header.</para></listitem><listitem><para><computeroutput>Microseconds</computeroutput> - An unsigned 32-bit value representing either the microseconds when the packet was captured if standard, or the nanoseconds when captured if using the modified format.</para></listitem><listitem><para><computeroutput>Captured Length</computeroutput> - An unsigned 32-bit value representing the number of octets captured that have been saved to the file.</para></listitem><listitem><para><computeroutput>Full Packet Length</computeroutput> - An unsigned 32-bit value representing the total number of octets in the packet.</para></listitem></itemizedlist>
</para><para>Due to resource limitations, it is possible for a packet capture to not have the complete contents of the packet, therefore the packet headers keep track of how big the packet was, as well as how much of that was actually written to the capture. </para>    </detaileddescription>
    <location file="pcap/packet.hh" line="68" column="1" bodyfile="pcap/packet.hh" bodystart="68" bodyend="117"/>
    <listofallmembers>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a2aa97456b3fdc78bc29e90a860892e66" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>_have</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a02c1523a85e0365ef563d0ea183fa0a9" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>_timestamp</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1ae2f0441abcde10c7448062ba24693c07" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>_usecs</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a302e31323881cd7a9ab81f4142e6042d" prot="private" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>_was</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1ae0d03678cf71fbfccf6d1fa8b52d4be2" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>actual_len</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1ab6ff365c35ec8a80e5bc768d2ea5046e" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>actual_len</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a03cb5d9a6130e49093cfc4cc0d9b8cf3" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>captured_len</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a9b3b72b9c7ffc8020d2c21eb5d97d4e2" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>captured_len</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a6a765377ff1a056fd5c84e3d935d710c" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>full_packet</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1ab064c23fe90c1d19643c45fbcb178d9f" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>operator=</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a9d682a640219a15ce19ccb7c86145e85" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>operator=</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a524190e5a0737d4f035d556fc05434d9" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>packet_header_t</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a9d349d11b68074cb627431a8d7367e14" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>packet_header_t</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a5674794d6e3070e4efa36f52809e1c42" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>packet_header_t</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a0009013b412e71f1fb7b4d3e3bb55a91" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>packet_header_t</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a9cd419a7db50fb2599573cf9b6c92a76" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>timestamp</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a3cc64e6e0a591efbacf1a2cc99738fee" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>timestamp</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1a4fc89050bbdc58c0bed871de2054df80" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>useconds</name></member>
      <member refid="structlibnokogiri_1_1pcap_1_1packet__header__t_1aca62c83d1041af332dbeec0a84493255" prot="public" virt="non-virtual"><scope>libnokogiri::pcap::packet_header_t</scope><name>useconds</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
